#서버로 돌리는 법
npx lite-server

#모듈이 필요한 이유
전역으로 접근하는 거 방지 위함

#웹팩이 필요한 이유
크롬뿐만 아니라 다른 곳에서도 모듈화해서 쓰기 위함
연결된 자바스크립트 파일을 하나로 합쳐줌. 합쳐진 파일을 bundle이라고 한다.
모듈의 시작점을 엔트리라고 한다.
저장하는 경로 설정을 output
여러개의 모듈을 하나의 파일로 만들어준다.

#npm
프로젝트를 관리해주는 도구
특히, 스크립트를 자동화해주는 기능 제공.
웹팩으로 코드를 번들링하는 과정을 npm script에 등록가능.
script "build"에 webpack 넣고 npm run build 하면 번들생성.

#npm install -D webpack webpack-cli 
webpack 개발자모드로 설치

#순서
1. npm프로젝트로 세팅해서 package.json 을 만든다.
2. webpack 명령어를 script build에 세팅한다.
3. npm install -D webpack webpack-cli 
4. webpack.config.js를 생성해서 웹팩파일 코딩한다.
5. npm run build 로 실행한다.

#로더
모든 파일을 모듈로 바라본다.

#css-loader
html코드가 DOM이란 모습으로 변환되야 문서가 보이듯,
css도 CSOM이란 모습으로 변환되어야 보임. html파일에서
css코드를 직접부르거나 inline script에 넣어줘야한다.
그래서 나온것이 스타일로더다. 자바스크립트로 변경된
스타일코드를 html에 넣어주는 로더다.

#file-loader
이미지도 가능하다. 이미지를 로더한다. 로더 수행하면, 파일명이
해시값으로 저장됨. 웹팩은 빌드할때 마다 유니크한 값을 생성.
그것이 해시값이다. 아마 캐시갱신을 위해서 처리. 성능을 위해서 캐싱.
이름을 변경해서 이름이 같지만 다른 이미지가 다시 뜨는 것을 방지.
캐싱된 이미지를 띄우기때문에 이름 변경하지않으면 같은 이름인데 다른
이미지가 보이질 않게 된다.

#url-loader
용량 작은 것들을 올리기 위함.

#플러그인
로더가 각 파일단위로 처리한 것에 반해, 플러그인은 번들된 결과물
하나를 처리한다. 실제로 직접 만들일 거의 없다. 필요한 플러그인은
제공되어있다. 어떤 플러그인이 있는지가 중요하다.

#배너플러그인
결과물에 빌드저오나 커밋 버전 같은걸 추가할 수 있다.